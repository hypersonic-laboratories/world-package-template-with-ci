name: "Update Package Version"
description: "Updates an existing package version via API using metadata.json"

inputs:
  api-url:
    description: "API base URL"
    required: true
  api-token:
    description: "API authentication token"
    required: true
  archive-path:
    description: "Path to the package archive"
    required: true
  archive-size:
    description: "Size of the archive in bytes"
    required: true

outputs:
  version-id:
    description: "Created version ID"
    value: ${{ steps.create-version.outputs.version-id }}
  package-id:
    description: "Package ID"
    value: ${{ steps.create-version.outputs.package-id }}
  client-upload-url:
    description: "Pre-signed URL for client upload"
    value: ${{ steps.create-version.outputs.client-upload-url }}
  server-upload-url:
    description: "Pre-signed URL for server upload"
    value: ${{ steps.create-version.outputs.server-upload-url }}

runs:
  using: "composite"
  steps:
    - name: Read metadata
      id: read-metadata
      shell: bash
      run: |
        if [ ! -f "metadata.json" ]; then
          echo "❌ Error: metadata.json not found"
          exit 1
        fi

        # Extract package version ID, package ID, and dependency IDs from metadata.json
        VERSION_ID=$(jq -r '.id' metadata.json)
        PACKAGE_ID=$(jq -r '.package.id' metadata.json)
        DEPENDENCY_IDS=$(jq -c '.dependencyIds // []' metadata.json)

        if [ "$VERSION_ID" = "null" ] || [ -z "$VERSION_ID" ]; then
          echo "❌ Error: id not found in metadata.json"
          exit 1
        fi

        if [ "$PACKAGE_ID" = "null" ] || [ -z "$PACKAGE_ID" ]; then
          echo "❌ Error: package.id not found in metadata.json"
          exit 1
        fi

        echo "version-id=$VERSION_ID" >> $GITHUB_OUTPUT
        echo "package-id=$PACKAGE_ID" >> $GITHUB_OUTPUT
        echo "dependency-ids=$DEPENDENCY_IDS" >> $GITHUB_OUTPUT
        echo "✅ Package Version ID: $VERSION_ID"
        echo "✅ Package ID: $PACKAGE_ID"
        echo "✅ Dependencies: $DEPENDENCY_IDS"

    - name: Update package version
      id: create-version
      shell: bash
      env:
        API_URL: ${{ inputs.api-url }}
        API_TOKEN: ${{ inputs.api-token }}
        VERSION_ID: ${{ steps.read-metadata.outputs.version-id }}
        PACKAGE_ID: ${{ steps.read-metadata.outputs.package-id }}
        DEPENDENCY_IDS: ${{ steps.read-metadata.outputs.dependency-ids }}
        ARCHIVE_SIZE: ${{ inputs.archive-size }}
      run: |
        # Construct the payload
        PAYLOAD=$(jq -n \
          --argjson clientSize "$ARCHIVE_SIZE" \
          --argjson serverSize "$ARCHIVE_SIZE" \
          '{
            clientSize: $clientSize,
            serverSize: $serverSize
          }')

        echo "📤 Updating package version..."
        echo "Version ID: $VERSION_ID"
        echo "Payload: $PAYLOAD"

        # Make the API request
        RESPONSE=$(curl -s -w "\n%{http_code}" \
          -X PATCH \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $API_TOKEN" \
          -d "$PAYLOAD" \
          "$API_URL/api/v1/package-versions/$VERSION_ID")

        # Extract HTTP status code and body
        HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
        BODY=$(echo "$RESPONSE" | sed '$d')

        echo "HTTP Status: $HTTP_CODE"

        if [ "$HTTP_CODE" -ne 200 ] && [ "$HTTP_CODE" -ne 201 ]; then
          echo "❌ Error: Failed to update package version (HTTP $HTTP_CODE)"
          echo "Response: $BODY"
          exit 1
        fi

        # Parse response
        UPDATED_VERSION_ID=$(echo "$BODY" | jq -r '.item.id')
        CLIENT_UPLOAD_URL=$(echo "$BODY" | jq -r '.item.clientUploadUrl')
        SERVER_UPLOAD_URL=$(echo "$BODY" | jq -r '.item.serverUploadUrl')

        if [ "$UPDATED_VERSION_ID" = "null" ] || [ -z "$UPDATED_VERSION_ID" ]; then
          echo "❌ Error: Failed to parse version ID from response"
          echo "Response: $BODY"
          exit 1
        fi

        echo "version-id=$UPDATED_VERSION_ID" >> $GITHUB_OUTPUT
        echo "package-id=$PACKAGE_ID" >> $GITHUB_OUTPUT
        echo "client-upload-url=$CLIENT_UPLOAD_URL" >> $GITHUB_OUTPUT
        echo "server-upload-url=$SERVER_UPLOAD_URL" >> $GITHUB_OUTPUT

        echo "✅ Package version updated: $UPDATED_VERSION_ID"
